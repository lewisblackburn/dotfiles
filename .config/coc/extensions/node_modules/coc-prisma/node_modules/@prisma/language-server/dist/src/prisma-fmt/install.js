"use strict";
/**
 * Imports
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const zlib_1 = __importDefault(require("zlib"));
const fs_1 = __importDefault(require("fs"));
const fetch_engine_1 = require("@prisma/fetch-engine");
const node_fetch_1 = __importDefault(require("node-fetch"));
/**
 * Install prisma format
 */
function install(url, fmtPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const file = fs_1.default.createWriteStream(fmtPath);
        // Fetch fetch fetch.
        try {
            const response = yield node_fetch_1.default(url, {
                agent: fetch_engine_1.getProxyAgent(url),
            });
            return yield new Promise((resolve, reject) => {
                const unzip = zlib_1.default.createGunzip();
                response.body.pipe(unzip).pipe(file).on('error', reject);
                file.on('finish', function () {
                    fs_1.default.chmodSync(fmtPath, '755');
                    file.close();
                    resolve(fmtPath);
                });
            });
        }
        catch (e) {
            // Cleanup on failure
            try {
                console.error(`Language Server failed while downloading url ${url} with fmtPath ${fmtPath}.`);
                console.error(e);
                fs_1.default.unlinkSync(fmtPath);
            }
            catch (err) { }
            throw e;
        }
    });
}
exports.default = install;
//# sourceMappingURL=install.js.map