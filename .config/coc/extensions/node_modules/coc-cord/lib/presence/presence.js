"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPresence = void 0;
const language_1 = require("../language/language");
exports.getPresence = (startTimeStamp, workspace, fileName) => {
    let presence = {
        startTimestamp: startTimeStamp,
        smallImageKey: "nvim",
        smallImageText: "NeoVim text editor"
    };
    let idlingPresence = {
        largeImageKey: presence.smallImageKey,
        largeImageText: presence.smallImageText,
        state: undefined,
        details: "idling"
    };
    presence = Object.assign(Object.assign({}, presence), idlingPresence);
    if (!workspace || !fileName) {
        return presence;
    }
    presence.state = `Workspace: ${workspace}`;
    presence.details = `Editing ${fileName}`;
    let ext = fileName.split(".");
    if (ext.length > 1) {
        ext = ext.slice(1, ext.length);
        if (fileName[0] === ".") {
            ext[0] = "." + ext[0];
        }
    }
    const lang = language_1.languages.find((lang) => {
        if (lang.fileName && fileName === fileNameForLanguage(lang)) {
            return lang;
        }
        if (lang.fileName && isAliasedExtensionForFile(lang, fileName)) {
            return lang;
        }
        if (!lang.fileName && lang.extension === ext[ext.length - 1]) {
            return lang;
        }
        if (!lang.fileName && lang.extension === ext.join(".")) {
            return lang;
        }
        if (!(lang === null || lang === void 0 ? void 0 : lang.fileName) && isAliasedExtension(lang, ext[0])) {
            return lang;
        }
    });
    if (!lang) {
        return presence;
    }
    presence.largeImageKey = lang.assetName;
    presence.largeImageText = lang.name;
    presence.details = `Editing ${fileName}`;
    return presence;
};
const fileNameForLanguage = (lang) => (lang.extension === "" ? lang.fileName : lang.fileName + "." + lang.extension);
const isAliasedExtensionForFile = (lang, fileName) => { var _a; return (_a = lang.extensionAliases) === null || _a === void 0 ? void 0 : _a.find((ext) => lang.fileName + "." + ext === fileName); };
const isAliasedExtension = (lang, extension) => { var _a; return (_a = lang.extensionAliases) === null || _a === void 0 ? void 0 : _a.find((ext) => ext == extension); };
